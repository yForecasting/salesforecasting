"hi80","lo95","hi95","actuals",
"naiveforecast", "meanhistdemand",
"AIC","BIC","AICC","MSE")
oos_fc_result <-  matrix(ncol=length(colnames_oos_fc_results),
nrow=ncol(data)*orimax*h)
colnames(oos_fc_result) <- colnames_oos_fc_results
# Make the forecast
# start from 2 because not the date column
if (is.na(train_length)){
train_length <- nrow(data)-(h+orimax-1)
}
irow1 <- 1 # matrix of results
# ori = 1;tsi=1;imod=1;ih=1 # debug
for (ori in 1:orimax){
for (tsi in 1:ncol(data)){
# training data
train <- ts(data[1:(train_length+ori-1),tsi],start=start,frequency = freq)
ytrue <- ts(data[(train_length+ori-1)+c(1:h),tsi],start=end(train)+1/round(freq),frequency = freq)
for (imod in 1:length(models)){
model <- tolower(models[imod])
if (model=="ets" | model=="e"){
# ETS base model
om <- forecast::ets(train)
# Forecast
fc <- forecast::forecast(om,h=h)
mod_nr <- 10004
} else {
warning("Model not found. This model has not been implemented.")
}
# plot(forecast(ets(train),h=7)); lines(ytrue,col="red") # debugging if you want
gmrae_benchmark <- forecast::naive(train,h=h)$mean
# benchmark model for GMRAE in denominator
mean_hist_demand <- mean(train)
# mean historical demand for MASE + RMSSE
# train_length <- length(train)
# fill in the data
for (ih in 1:h){
# ETS or other forecast model case
oos_fc_result[irow1,] <- c(train_length+ih, tsi, mod_nr, 1, 1, ih, ori,
fc$mean[ih], fc$lower[ih,1], fc$upper[ih,1],
fc$lower[ih,2], fc$upper[ih,2], ytrue[ih],
gmrae_benchmark[ih], mean_hist_demand,
om$aic, om$bic, om$aicc, om$mse)
irow1 <- irow1 + 1
} # end of ih
} # end of imod
} # end of tsi
} # end of ori
# Save the results
if (export==TRUE){
# save with ; or , in a csv file:
write.csv(x=oos_fc_result, file="forecast_file_models_ets0.csv")
write.csv2(x=oos_fc_result, file="forecast_file_models_ets.csv")
}
# Return the yft table
return(oos_fc_result)
}
generate_forecast_table(data, models=c("ets"), start=c(2019,7,1), freq=365.25, h=3, orimax=2, train_length=NA, export=FALSE)
generate_forecast_table <- function(data, models=c("ets"),
start=c(2019,7,1), freq=365.25, h=1, orimax=1,
train_length=NA, export=FALSE){
# Return object: out-of-sample (oos) forecasting (fc) results
colnames_oos_fc_results <- c("period","nrsal","nrmod","nrdoe","nrsetup",
"nrhor","nrrolor","pointforecast","lo80",
"hi80","lo95","hi95","actuals",
"naiveforecast", "meanhistdemand",
"AIC","BIC","AICC","MSE")
oos_fc_result <-  matrix(ncol=length(colnames_oos_fc_results),
nrow=ncol(data)*orimax*h)
colnames(oos_fc_result) <- colnames_oos_fc_results
# Make the forecast
# start from 2 because not the date column
if (is.na(train_length)){
train_length <- nrow(data)-(h+orimax-1)
}
irow1 <- 1 # matrix of results
# ori = 1;tsi=1;imod=1;ih=1 # debug
for (ori in 1:orimax){
for (tsi in 1:ncol(data)){
# training data
train <- ts(data[1:(train_length+ori-1),tsi],start=start,frequency = freq)
ytrue <- ts(data[(train_length+ori-1)+c(1:h),tsi],start=end(train)+1/round(freq),frequency = freq)
for (imod in 1:length(models)){
model <- tolower(models[imod])
if (model=="ets" | model=="e"){
# ETS base model
om <- forecast::ets(train)
# Forecast
fc <- forecast::forecast(om,h=h)
mod_nr <- 10004
} else {
warning("Model not found. This model has not been implemented.")
}
# plot(forecast(ets(train),h=7)); lines(ytrue,col="red") # debugging if you want
gmrae_benchmark <- forecast::naive(train,h=h)$mean
# benchmark model for GMRAE in denominator
mean_hist_demand <- mean(train)
# mean historical demand for MASE + RMSSE
# fill in the data
for (ih in 1:h){
# ETS or other forecast model case
oos_fc_result[irow1,] <- c((train_length+ori-1+ih), tsi, mod_nr, 1, 1, ih, ori,
fc$mean[ih], fc$lower[ih,1], fc$upper[ih,1],
fc$lower[ih,2], fc$upper[ih,2], ytrue[ih],
gmrae_benchmark[ih], mean_hist_demand,
om$aic, om$bic, om$aicc, om$mse)
irow1 <- irow1 + 1
} # end of ih
} # end of imod
} # end of tsi
} # end of ori
# Save the results
if (export==TRUE){
# save with ; or , in a csv file:
write.csv(x=oos_fc_result, file="forecast_file_models_ets0.csv")
write.csv2(x=oos_fc_result, file="forecast_file_models_ets.csv")
}
# Return the yft table
return(oos_fc_result)
}
generate_forecast_table(data, models=c("ets"), start=c(2019,7,1), freq=365.25, h=3, orimax=2, train_length=NA, export=FALSE)
getwd()
document()
library(devtools)
document()
rm(list = c("generate_forecast_table", "transactional_to_timeseries"))
use_package("forecast")
document()
check()
stats::ts
document()
check()
library(salesforecasting)
?generate_forecast_table
source("c:/ydir.r")
data <- data.frame(AA=rnorm(100,100,10),AB=rnorm(100,500,10),BB=rnorm(100,1000,10))
# Return object: out-of-sample (oos) forecasting (fc) results
colnames_oos_fc_results <- c("period","nrsal","nrmod","nrdoe","nrsetup",
"nrhor","nrrolor","pointforecast","lo80",
"hi80","lo95","hi95","actuals",
"naiveforecast", "meanhistdemand",
"AIC","BIC","AICC","MSE")
oos_fc_result <-  matrix(ncol=length(colnames_oos_fc_results),
nrow=ncol(data)*orimax*h)
colnames(oos_fc_result) <- colnames_oos_fc_results
train_length <- nrow(data)-(h+orimax-1)
h=1
orimax=1
freq=365.25
start=c(2019,7,1)
# Return object: out-of-sample (oos) forecasting (fc) results
colnames_oos_fc_results <- c("period","nrsal","nrmod","nrdoe","nrsetup",
"nrhor","nrrolor","pointforecast","lo80",
"hi80","lo95","hi95","actuals",
"naiveforecast", "meanhistdemand",
"AIC","BIC","AICC","MSE")
oos_fc_result <-  matrix(ncol=length(colnames_oos_fc_results),
nrow=ncol(data)*orimax*h)
colnames(oos_fc_result) <- colnames_oos_fc_results
train_length <- nrow(data)-(h+orimax-1)
irow1 <- 1 # matrix of results
ori = 1;tsi=1;imod=1;ih=1
# training data
train <- stats::ts(data[1:(train_length+ori-1),tsi],start=start,frequency = freq)
ytrue <- stats::ts(data[(train_length+ori-1)+c(1:h),tsi],start=stats::end(train)+1/round(freq),frequency = freq)
model <- tolower(models[imod])
# ETS base model
om <- forecast::ets(train)
# Forecast
fc <- forecast::forecast(om,h=h)
mod_nr <- 10004
gmrae_benchmark <- forecast::naive(train,h=h)$mean
# benchmark model for GMRAE in denominator
mean_hist_demand <- mean(train)
c((train_length+ori-1+ih), tsi, mod_nr, 1, 1, ih, ori,
fc$mean[ih], fc$lower[ih,1], fc$upper[ih,1],
fc$lower[ih,2], fc$upper[ih,2], ytrue[ih],
gmrae_benchmark[ih], mean_hist_demand,
om$aic, om$bic, om$aicc, om$mse)
# ETS or other forecast model case
oos_fc_result[irow1,] <- c((train_length+ori-1+ih), tsi, mod_nr, 1, 1, ih, ori,
fc$mean[ih], fc$lower[ih,1], fc$upper[ih,1],
fc$lower[ih,2], fc$upper[ih,2], ytrue[ih],
gmrae_benchmark[ih], mean_hist_demand,
om$aic, om$bic, om$aicc, om$mse)
oos_fc_result[irow1,]
om <- forecast::naive(train,h)
c((train_length+ori-1+ih), tsi, mod_nr, 1, 1, ih, ori,
fc$mean[ih], fc$lower[ih,1], fc$upper[ih,1],
fc$lower[ih,2], fc$upper[ih,2], ytrue[ih],
gmrae_benchmark[ih], mean_hist_demand,
om$aic, om$bic, om$aicc, om$mse)
# ETS or other forecast model case
oos_fc_result[irow1,] <- c((train_length+ori-1+ih), tsi, mod_nr, 1, 1, ih, ori,
fc$mean[ih], fc$lower[ih,1], fc$upper[ih,1],
fc$lower[ih,2], fc$upper[ih,2], ytrue[ih],
gmrae_benchmark[ih], mean_hist_demand,
om$aic, om$bic, om$aicc, om$mse)
oos_fc_result[irow1,]
om <- forecast::naive(train,h)
om
ets(train)
c((train_length+ori-1+ih), tsi, mod_nr, 1, 1, ih, ori,
fc$mean[ih], fc$lower[ih,1], fc$upper[ih,1],
fc$lower[ih,2], fc$upper[ih,2], ytrue[ih],
gmrae_benchmark[ih], mean_hist_demand,
om$aic, om$bic, om$aicc, om$mse)
oos_fc_result[irow1,]
# ETS or other forecast model case
oos_fc_result[irow1,] <- c((train_length+ori-1+ih), tsi, mod_nr, 1, 1, ih, ori,
fc$mean[ih], fc$lower[ih,1], fc$upper[ih,1],
fc$lower[ih,2], fc$upper[ih,2], ytrue[ih],
gmrae_benchmark[ih], mean_hist_demand,
om$aic, om$bic, om$aicc, om$mse)
oos_fc_result[irow1,]
om
rm(om)
om
om <- forecast::naive(train,h)
om$mse
c((train_length+ori-1+ih), tsi, mod_nr, 1, 1, ih, ori,
fc$mean[ih], fc$lower[ih,1], fc$upper[ih,1],
fc$lower[ih,2], fc$upper[ih,2], ytrue[ih],
gmrae_benchmark[ih], mean_hist_demand,
om$aic, om$bic, om$aicc, om$mse)
rm(fc)
fc <- om
mod_nr  10001
mod_nr <- 10001
c((train_length+ori-1+ih), tsi, mod_nr, 1, 1, ih, ori,
fc$mean[ih], fc$lower[ih,1], fc$upper[ih,1],
fc$lower[ih,2], fc$upper[ih,2], ytrue[ih],
gmrae_benchmark[ih], mean_hist_demand,
om$aic, om$bic, om$aicc, om$mse)
mean_hist_demand
fc
# Missing info
om$aic=NA
om$bic=NA
om$aicc=NA
om$mse=NA
mod_nr <- 10004
c((train_length+ori-1+ih), tsi, mod_nr, 1, 1, ih, ori,
fc$mean[ih], fc$lower[ih,1], fc$upper[ih,1],
fc$lower[ih,2], fc$upper[ih,2], ytrue[ih],
gmrae_benchmark[ih], mean_hist_demand,
om$aic, om$bic, om$aicc, om$mse)
om
om$mse
names(om)
om$fitted
om$fitted-om$x
pm$x
om$x
names(om)
om$residuals
om$mse=mean(om$residuals^2)
om$mse
mean(om$residuals^2)
om$residuals
om$residuals^2
forecast::snaive(train,h)
library(forecast)
?snaive
train
data <- data.frame(MA=rnorm(30,3000,300),MB=rnorm(30,7000,400),MC=rnorm(30,200,50))
data <- data.frame(MA=rnorm(30,3000,300),MB=rnorm(30,7000,400),MC=rnorm(30,200,50))
data
round(data)
data <- round(data.frame(MA=rnorm(30,3000,300),MB=rnorm(30,7000,400),MC=rnorm(30,200,50)))
data
freq=12
h=3
orimax=1
# training data
train <- stats::ts(data[1:(train_length+ori-1),tsi],start=start,frequency = freq)
ytrue <- stats::ts(data[(train_length+ori-1)+c(1:h),tsi],start=stats::end(train)+1/round(freq),frequency = freq)
model
om <- forecast::snaive(train,h)
fc <- om
om
om$mse
om$mse=mean(om$residuals^2,na.rm=TRUE)
mod_nr <- 10002
names('om')
names(om)
# Missing info
om$aic=NA
om$bic=NA
om$aicc=NA
gmrae_benchmark <- forecast::naive(train,h=h)$mean
# benchmark model for GMRAE in denominator
mean_hist_demand <- mean(train)
c((train_length+ori-1+ih), tsi, mod_nr, 1, 1, ih, ori,
fc$mean[ih], fc$lower[ih,1], fc$upper[ih,1],
fc$lower[ih,2], fc$upper[ih,2], ytrue[ih],
gmrae_benchmark[ih], mean_hist_demand,
om$aic, om$bic, om$aicc, om$mse)
# ETS or other forecast model case
oos_fc_result[irow1,] <- c((train_length+ori-1+ih), tsi, mod_nr, 1, 1, ih, ori,
fc$mean[ih], fc$lower[ih,1], fc$upper[ih,1],
fc$lower[ih,2], fc$upper[ih,2], ytrue[ih],
gmrae_benchmark[ih], mean_hist_demand,
om$aic, om$bic, om$aicc, om$mse)
oos_fc_result[irow1,]
mean_hist_demand
mean(train)
train
# benchmark model for GMRAE in denominator
mean_hist_demand <- mean(train, na.rm=TRUE)
mean_hist_demand
train_length
train_length <- nrow(data)-(h+orimax-1)
# training data
train <- stats::ts(data[1:(train_length+ori-1),tsi],start=start,frequency = freq)
ytrue <- stats::ts(data[(train_length+ori-1)+c(1:h),tsi],start=stats::end(train)+1/round(freq),frequency = freq)
om <- forecast::snaive(train,h)
fc <- om
om$mse=mean(om$residuals^2,na.rm=TRUE)
mod_nr <- 10002
# Missing info
om$aic=NA
om$bic=NA
om$aicc=NA
gmrae_benchmark <- forecast::naive(train,h=h)$mean
# benchmark model for GMRAE in denominator
mean_hist_demand <- mean(train, na.rm=TRUE)
# ETS or other forecast model case
oos_fc_result[irow1,] <- c((train_length+ori-1+ih), tsi, mod_nr, 1, 1, ih, ori,
fc$mean[ih], fc$lower[ih,1], fc$upper[ih,1],
fc$lower[ih,2], fc$upper[ih,2], ytrue[ih],
gmrae_benchmark[ih], mean_hist_demand,
om$aic, om$bic, om$aicc, om$mse)
oos_fc_result[irow1,
oos_fc_result[irow1,]
oos_fc_result[irow1,]
generate_forecast_table <- function(data, models=c("ets"),
start, freq=365.25, h=1, orimax=1,
train_length=NA, export=FALSE){
# Return object: out-of-sample (oos) forecasting (fc) results
colnames_oos_fc_results <- c("period","nrsal","nrmod","nrdoe","nrsetup",
"nrhor","nrrolor","pointforecast","lo80",
"hi80","lo95","hi95","actuals",
"naiveforecast", "meanhistdemand",
"AIC","BIC","AICC","MSE")
oos_fc_result <-  matrix(ncol=length(colnames_oos_fc_results),
nrow=ncol(data)*orimax*h)
colnames(oos_fc_result) <- colnames_oos_fc_results
# Make the forecast
# start from 2 because not the date column
if (is.na(train_length)){
train_length <- nrow(data)-(h+orimax-1)
}
irow1 <- 1 # matrix of results
# ori = 1;tsi=1;imod=1;ih=1 # debug
for (ori in 1:orimax){
for (tsi in 1:ncol(data)){
# training data
train <- stats::ts(data[1:(train_length+ori-1),tsi],start=start,frequency = freq)
ytrue <- stats::ts(data[(train_length+ori-1)+c(1:h),tsi],start=stats::end(train)+1/round(freq),frequency = freq)
for (imod in 1:length(models)){
model <- tolower(models[imod])
if (model=="naive" | model=="n"){
om <- forecast::naive(train,h)
fc <- om
om$mse=mean(om$residuals^2,na.rm=TRUE)
mod_nr <- 10001
# Missing info
om$aic=NA
om$bic=NA
om$aicc=NA
} else if (model=="seasonal naive" | model=="sn"){
om <- forecast::snaive(train,h)
fc <- om
om$mse=mean(om$residuals^2,na.rm=TRUE)
mod_nr <- 10002
# Missing info
om$aic=NA
om$bic=NA
om$aicc=NA
} else if (model=="ets" | model=="e"){
# ETS base model
om <- forecast::ets(train)
# Forecast
fc <- forecast::forecast(om,h=h)
mod_nr <- 10004
} else {
warning("Model not found. This model has not been implemented.")
}
# plot(forecast(ets(train),h=7)); lines(ytrue,col="red") # debugging if you want
gmrae_benchmark <- forecast::naive(train,h=h)$mean
# benchmark model for GMRAE in denominator
mean_hist_demand <- mean(train, na.rm=TRUE)
# mean historical demand for MASE + RMSSE
# fill in the data
for (ih in 1:h){
# ETS or other forecast model case
oos_fc_result[irow1,] <- c((train_length+ori-1+ih), tsi, mod_nr, 1, 1, ih, ori,
fc$mean[ih], fc$lower[ih,1], fc$upper[ih,1],
fc$lower[ih,2], fc$upper[ih,2], ytrue[ih],
gmrae_benchmark[ih], mean_hist_demand,
om$aic, om$bic, om$aicc, om$mse)
irow1 <- irow1 + 1
} # end of ih
} # end of imod
} # end of tsi
} # end of ori
# Save the results
if (export==TRUE){
# save with ; or , in a csv file:
utils::write.csv(x=oos_fc_result, file="forecast_file_models_ets0.csv")
utils::write.csv2(x=oos_fc_result, file="forecast_file_models_ets.csv")
}
# Return the yft table
return(oos_fc_result)
}
generate_forecast_table(data, models=c("n","sn"), start=c(2019,7), freq=12, h=3, orimax=1)
length(models)
generate_forecast_table <- function(data, models=c("ets"),
start, freq=365.25, h=1, orimax=1,
train_length=NA, export=FALSE){
# Return object: out-of-sample (oos) forecasting (fc) results
colnames_oos_fc_results <- c("period","nrsal","nrmod","nrdoe","nrsetup",
"nrhor","nrrolor","pointforecast","lo80",
"hi80","lo95","hi95","actuals",
"naiveforecast", "meanhistdemand",
"AIC","BIC","AICC","MSE")
oos_fc_result <-  matrix(ncol=length(colnames_oos_fc_results),
nrow=length(models)*ncol(data)*orimax*h)
colnames(oos_fc_result) <- colnames_oos_fc_results
# Make the forecast
# start from 2 because not the date column
if (is.na(train_length)){
train_length <- nrow(data)-(h+orimax-1)
}
irow1 <- 1 # matrix of results
# ori = 1;tsi=1;imod=1;ih=1 # debug
for (ori in 1:orimax){
for (tsi in 1:ncol(data)){
# training data
train <- stats::ts(data[1:(train_length+ori-1),tsi],start=start,frequency = freq)
ytrue <- stats::ts(data[(train_length+ori-1)+c(1:h),tsi],start=stats::end(train)+1/round(freq),frequency = freq)
for (imod in 1:length(models)){
model <- tolower(models[imod])
if (model=="naive" | model=="n"){
om <- forecast::naive(train,h)
fc <- om
om$mse=mean(om$residuals^2,na.rm=TRUE)
mod_nr <- 10001
# Missing info
om$aic=NA
om$bic=NA
om$aicc=NA
} else if (model=="seasonal naive" | model=="sn"){
om <- forecast::snaive(train,h)
fc <- om
om$mse=mean(om$residuals^2,na.rm=TRUE)
mod_nr <- 10002
# Missing info
om$aic=NA
om$bic=NA
om$aicc=NA
} else if (model=="ets" | model=="e"){
# ETS base model
om <- forecast::ets(train)
# Forecast
fc <- forecast::forecast(om,h=h)
mod_nr <- 10004
} else {
warning("Model not found. This model has not been implemented.")
}
# plot(forecast(ets(train),h=7)); lines(ytrue,col="red") # debugging if you want
gmrae_benchmark <- forecast::naive(train,h=h)$mean
# benchmark model for GMRAE in denominator
mean_hist_demand <- mean(train, na.rm=TRUE)
# mean historical demand for MASE + RMSSE
# fill in the data
for (ih in 1:h){
# ETS or other forecast model case
oos_fc_result[irow1,] <- c((train_length+ori-1+ih), tsi, mod_nr, 1, 1, ih, ori,
fc$mean[ih], fc$lower[ih,1], fc$upper[ih,1],
fc$lower[ih,2], fc$upper[ih,2], ytrue[ih],
gmrae_benchmark[ih], mean_hist_demand,
om$aic, om$bic, om$aicc, om$mse)
irow1 <- irow1 + 1
} # end of ih
} # end of imod
} # end of tsi
} # end of ori
# Save the results
if (export==TRUE){
# save with ; or , in a csv file:
utils::write.csv(x=oos_fc_result, file="forecast_file_models_ets0.csv")
utils::write.csv2(x=oos_fc_result, file="forecast_file_models_ets.csv")
}
# Return the yft table
return(oos_fc_result)
}
generate_forecast_table(data, models=c("n","sn"), start=c(2019,7), freq=12, h=3, orimax=1)
hw(train,h)
hw(trian)
hw(train)
a=hw(train)
names(a)
getwd()
document()
library(devtools)
document()
rm(list=ls())
document()
check()
source("c:/ydir.r")
